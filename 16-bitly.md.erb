---
title: Using External APIs
slug: external-api
date: 0016/01/01
number: 16
extra: true
points: 100
published: true
photoUrl: http://www.flickr.com/photos/ikewinski/9632638608/
photoAuthor: Mike Lewinski
contents: Use Bitly to shorten links.|Use the Bitly API to retrieve popularity data.|Use that data to rank links by most clicked.
note: NOT INCLUDED IN FREE/TRANSLATED VERSIONS
---

////

////

### Popularity Contest

////

////

### Obtaining An OAuth Token

////

////

<%= screenshot "17-1", "Getting a Bitly access token" %>

////

### A Few Packages

////

~~~bash
meteor add http
~~~

////

~~~js
Package.describe({
  name: 'bitly',
  summary: "Bitly package",
  version: '1.0.0'
});

Package.onUse(function (api) {
  api.versionsFrom('0.9.4');
  api.addFiles('bitly.js', 'server');
  api.export('Bitly');
});
~~~
<%= caption "packages/bitly/package.js" %>

////

~~~bash
meteor add bitly
~~~

<%= commit "16-1", "Added http package and created Bitly package." %>

### Shortening URLs

////

////

////

~~~js
{
  "bitly": "a5bd3da617a664779650ee8bfcf16f747c8d361a"
}
~~~
<%= caption "settings.json" %>

////

~~~
settings.json
~~~
<%= caption ".gitignore" %>

////

////

~~~bash
meteor --settings settings.json
~~~

<% note do %>

### Adding An Alias

////

////

~~~bash
open -a TextEdit .bash_profile
~~~

////

////

~~~bash
alias meteorset='meteor --settings settings.json'
~~~

////

<% end %>

////

~~~js
Bitly = {};

Bitly.shortenURL = function(url){
  if(!Meteor.settings.bitly)
    throw new Meteor.Error(500, 'Please provide a Bitly token in Meteor.settings');

  var shortenResponse = Meteor.http.get(
    "https://api-ssl.bitly.com/v3/shorten?",
    {
      timeout: 5000,
      params:{
        "format": "json",
        "access_token": Meteor.settings.bitly,
        "longUrl": url
      }
    }
  );
  if(shortenResponse.statusCode === 200){
    return shortenResponse.data.data.url
  }else{
    throw new Meteor.Error(500, "Bitly call failed with error: "+shortenResponse.status_txt);
  }
}
~~~
<%= caption "packages/bitly/bitly.js" %>

////

~~~js
//...

var user = Meteor.user();
var post = _.extend(postAttributes, {
  userId: user._id, 
  author: user.username, 
  submitted: new Date(),
  commentsCount: 0,
  upvoters: [], 
  votes: 0
});    

// shorten link URL
if(Meteor.isServer){
  var shortUrl = Bitly.shortenURL(post.url);
  if(post.url && shortUrl)
    post.shortUrl = shortUrl;
}

var postId = Posts.insert(post);

return {
  _id: postId
};

//...
~~~
<%= caption "collections/posts.js" %>
<%= highlight "13~18" %>

////

////

<%= commit "16-2", "Shortening URLs on post submit." %>

////

////

<%= screenshot "17-2", "The Bitly dashboard" %>

////

### Displaying Shortened Links

////

~~~html
<template name="postItem">
  <div class="post">
    <a href="#" class="upvote btn btn-default {{upvotedClass}}">⬆</a>
    <div class="post-content">
      <h3><a href="{{postUrl}}">{{title}}</a><span>{{domain}}</span></h3>
      <p>
        {{pluralize votes "Vote"}},
        submitted by {{author}},
        <a href="{{pathFor 'postPage'}}">{{pluralize commentsCount "comment"}}</a>
        {{#if ownPost}}<a href="{{pathFor 'postEdit'}}">Edit</a>{{/if}}
      </p>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn btn-default">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/templates/posts/post_item.html" %>
<%= highlight "5" %>

~~~js
Template.postItem.helpers({
  ownPost: function() {
    return this.userId === Meteor.userId();
  },
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  },
  upvotedClass: function() {
    var userId = Meteor.userId();
    if (userId && !_.include(this.upvoters, userId)) {
      return 'btn-primary upvotable';
    } else {
      return 'disabled';
    }
  },
  postUrl: function(){
    return this.shortUrl ? this.shortUrl : this.url;
  }
});
//...
~~~
<%= caption "client/templates/posts/post_item.js" %>
<%= highlight "18~20" %>

////

<%= commit "16-3", "Displaying shortened links." %>

<% note do %>

### Migrations

////

////

<% end %>

### Retrieving Bitly Stats

////

////

////

~~~js
//...

Bitly.getClicks = function(link){
  if(!Meteor.settings.bitly)
    throw new Meteor.Error(500, 'Please provide a Bitly token in Meteor.settings');

  var statsResponse = Meteor.http.get(
    "https://api-ssl.bitly.com/v3/link/clicks?",
    {
      timeout: 5000,
      params:{
        "format": "json",
        "access_token": Meteor.settings.bitly,
        "link": link
      }
    }
  );
  if(statsResponse.data.status_code === 200)
    return statsResponse.data.data.link_clicks
}

Meteor.methods({
  'getBitlyClicks': function(link){
    return Bitly.getClicks(link);
  }
});
~~~
<%= caption "packages/bitly/bitly.js" %>

<%= commit "16-4", "Added getClicks method." %>

////

~~~js
> Meteor.call('getBitlyClicks', 'http://bit.ly/15vghAk', function(error, result){console.log(result)})
~~~
<%= caption "The browser console" %>

////

### Distributing API Calls

////

<% note do %>

### Regular Reactivity

////

////

////

<% end %>

////

////

////

////

////

~~~js
//...

var callInterval = 10000; // 1000ms * 10 = 10s

Meteor.setInterval(function(){
  // get all posts with the shortUrl property
  var shortUrlPosts = Posts.find({shortUrl: { $exists: true }});
  var postsNumber = shortUrlPosts.count();

  // initialize counter
  var count = 0;

  shortUrlPosts.forEach(function(post){
    // calculate the right delay to distribute API calls evenly throughout the interval
    var callTimeout = Math.round(callInterval/postsNumber*count);

    Meteor.setTimeout(function(){
      Posts.update(post._id, {$set: {clicks: Bitly.getClicks(post.shortUrl)}});
    }, callTimeout);

    count++;
  });

}, callInterval);
~~~
<%= caption "packages/bitly/bitly.js" %>
<%= highlight "3~24" %>

////

////

~~~html
<template name="postItem">
  <div class="post">
    <a href="#" class="upvote btn btn-default {{upvotedClass}}">⬆</a>
    <div class="post-content">
      <h3><a href="{{postUrl}}">{{title}}</a><span>{{domain}}</span></h3>
      <p>
        {{pluralize votes "Vote"}},
        submitted by {{author}},
        {{#if clicks}}{{pluralize clicks "click"}},{{/if}}
        <a href="{{pathFor 'postPage'}}">{{pluralize commentsCount "comment"}}</a>
        {{#if ownPost}}<a href="{{pathFor 'postEdit'}}">Edit</a>{{/if}}
      </p>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn btn-default">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/templates/posts/post_item.html" %>
<%= highlight "9" %>

<%= commit "16-5", "Distributing Bitly API calls." %>

### Most Clicked

////

////

~~~js
//...

BestPostsListController = PostsListController.extend({
  sort: {votes: -1, submitted: -1, _id: -1},
  nextPath: function() {
    return Router.routes.bestPosts.path({postsLimit: this.postsLimit() + this.increment})
  }
});

ClickedPostsController = PostsListController.extend({
  sort: {clicks: -1, submitted: -1, _id: -1},
  nextPath: function() {
    return Router.routes.clickedPosts.path({postsLimit: this.postsLimit() + this.increment})
  }
});

//...
~~~
<%= caption "lib/router.js" %>
<%= highlight "10~15" %>

////

~~~js
//...

Router.route('/best/:postsLimit?', {name: 'bestPosts'});

Router.route('/clicked/:postsLimit?', {name: 'clickedPosts'});

Router.route('/posts/:_id', {

//...
~~~
<%= caption "lib/router.js" %>
<%= highlight "5" %>

////

~~~js
//...

<li class="{{activeRouteClass  'bestPosts'}}">
  <a href="{{pathFor 'bestPosts'}}">Best</a>
</li>
<li class="{{activeRouteClass  'clickedPosts'}}">
  <a href="{{pathFor 'clickedPosts'}}">Most Clicked</a>
</li>
{{#if currentUser}}
  <li class="{{activeRouteClass 'postSubmit'}}">
    <a href="{{pathFor 'postSubmit'}}">Submit Post</a>
  </li>
  <li class="dropdown">
    {{> notifications}}
  </li>
{{/if}}

//...
~~~
<%= caption "client/templates/includes/header.html" %>
<%= highlight "6~8" %>

////

<%= commit "16-6", "Adding Most Clicked view." %>

<%= screenshot "17-3", "The Most Clicked view." %>

////
